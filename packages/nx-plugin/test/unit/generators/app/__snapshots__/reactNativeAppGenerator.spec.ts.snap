// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`reactNativeAppGenerator .eslintrc.json matches snapshot 1`] = `
{
  "extends": [
    "../../.eslintrc.json",
  ],
  "ignorePatterns": [
    "node_modules",
  ],
  "overrides": [
    {
      "files": [
        "jest.config.ts",
        "test/**/*.ts",
        "*.spec.ts",
        "*.test.ts",
        "test/**/*.tsx",
        "*.spec.tsx",
        "*.test.tsx",
      ],
      "parserOptions": {
        "project": [
          "packages/react-native-app/tsconfig.spec.json",
        ],
      },
    },
    {
      "files": [
        "*.stories.tsx",
      ],
      "parserOptions": {
        "project": [
          "packages/react-native-app/tsconfig.storybook.json",
        ],
      },
    },
    {
      "excludedFiles": [
        "jest.config.ts",
        "test/**/*.ts",
        "*.spec.ts",
        "*.test.ts",
        "test/**/*.tsx",
        "*.stories.tsx",
        "*.spec.tsx",
        "*.test.tsx",
      ],
      "files": [
        "*.ts",
        "*.tsx",
      ],
      "parserOptions": {
        "project": [
          "packages/react-native-app/tsconfig.app.json",
        ],
      },
    },
    {
      "files": [
        "*.tsx",
      ],
      "rules": {
        "react/react-in-jsx-scope": "off",
      },
    },
  ],
}
`;

exports[`reactNativeAppGenerator .ruby-version matches snapshot 1`] = `
"3.2.2
"
`;

exports[`reactNativeAppGenerator .xcode-version matches snapshot 1`] = `
"14.3.1
"
`;

exports[`reactNativeAppGenerator Gemfile Gemfile matches snapshot 1`] = `
"source "https://rubygems.org"

# You may use http://rbenv.org/ or https://rvm.io/ to install and use this version
ruby ">= 3.2.2"

# Temporary patch until cocoapods releases a patch: https://stackoverflow.com/a/77237290/599391
gem "activesupport", "~> 7.0", "<= 7.0.8"
gem "cocoapods", "~> 1.12"
gem "dotenv"
gem "fastlane"

plugins_path = File.join(File.dirname(__FILE__), "fastlane", "Pluginfile")
eval_gemfile(plugins_path) if File.exist?(plugins_path)"
`;

exports[`reactNativeAppGenerator e2e .detoxrc.json matches snapshot 1`] = `
"{
  "testRunner": {
    "args": {
      "$0": "jest",
      "config": "./jest.config.json"
    },
    "jest": {
      "setupTimeout": 120000
    }
  },
  "apps": {
    "ios.debug": {
      "type": "ios.app",
      "build": "cd ../.. && yarn nx build:ios react-native-app --configuration=debug-simulator",
      "binaryPath": "../../packages/react-native-app/ios/build/Build/Products/Debug-iphonesimulator/ReactNativeApp.app"
    },
    "ios.release": {
      "type": "ios.app",
      "build": "cd ../.. && yarn nx build:ios react-native-app --configuration=release-simulator",
      "binaryPath": "../../packages/react-native-app/ios/build/Build/Products/Release-iphonesimulator/ReactNativeApp.app"
    },
    "android.debug": {
      "type": "android.apk",
      "build": "cd ../.. && yarn nx build:android react-native-app --configuration=test-debug",
      "binaryPath": "../../packages/react-native-app/android/app/build/outputs/apk/debug/app-debug.apk"
    },
    "android.release": {
      "type": "android.apk",
      "build": "cd ../.. && yarn nx build:android react-native-app --configuration=test-release",
      "binaryPath": "../../packages/react-native-app/android/app/build/outputs/apk/release/app-release.apk"
    }
  },
  "devices": {
    "simulator": {
      "type": "ios.simulator",
      "device": {
        "type": "iPhone 14"
      }
    },
    "emulator": {
      "type": "android.emulator",
      "device": {
        "avdName": "Pixel_4a_API_30"
      }
    }
  },
  "configurations": {
    "ios.sim.release": {
      "device": "simulator",
      "app": "ios.release"
    },
    "ios.sim.debug": {
      "device": "simulator",
      "app": "ios.debug"
    },
    "android.emu.release": {
      "device": "emulator",
      "app": "android.release"
    },
    "android.emu.debug": {
      "device": "emulator",
      "app": "android.debug"
    }
  }
}
"
`;

exports[`reactNativeAppGenerator e2e .eslintrc.json matches snapshot 1`] = `
{
  "extends": [
    "../../.eslintrc.json",
  ],
  "ignorePatterns": [
    "node_modules",
  ],
  "overrides": [
    {
      "files": [
        "jest.config.ts",
        "test/**/*.ts",
        "*.spec.ts",
        "*.test.ts",
      ],
      "parserOptions": {
        "project": [
          "e2e/react-native-app-e2e/tsconfig.spec.json",
        ],
      },
    },
  ],
}
`;

exports[`reactNativeAppGenerator e2e jest.config.json jest.config.json matches snapshot 1`] = `
"{
  "preset": "../../jest.preset",
  "rootDir": ".",
  "testMatch": [
    "<rootDir>/test/**/*.test.ts?(x)",
    "<rootDir>/test/**/*.spec.ts?(x)"
  ],
  "testTimeout": 120000,
  "maxWorkers": 1,
  "globalSetup": "detox/runners/jest/globalSetup",
  "globalTeardown": "detox/runners/jest/globalTeardown",
  "reporters": [
    [
      "jest-junit",
      {
        "addFileAttribute": "true",
        "classNameTemplate": "{suitename}",
        "outputDirectory": "reports/junit",
        "outputName": "react-native-app-e2e.xml"
      }
    ]
  ],
  "testEnvironment": "detox/runners/jest/testEnvironment",
  "verbose": true,
  "setupFilesAfterEnv": [
    "<rootDir>/test/setup/setup.ts"
  ],
  "coverageDirectory": "../../reports/coverage/e2e/react-native-app-e2e"
}
"
`;

exports[`reactNativeAppGenerator e2e project.json matches snapshot 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "implicitDependencies": [
    "react-native-app",
  ],
  "name": "react-native-app-e2e",
  "projectType": "application",
  "sourceRoot": "packages/react-native-app-e2e/src",
  "tags": [],
  "targets": {
    "build-e2e:android": {
      "configurations": {
        "production": {
          "detoxConfiguration": "android.emu.release",
        },
      },
      "executor": "@nx/detox:build",
      "options": {
        "detoxConfiguration": "android.emu.debug",
      },
    },
    "build-e2e:ios": {
      "configurations": {
        "production": {
          "detoxConfiguration": "ios.sim.release",
        },
      },
      "executor": "@nx/detox:build",
      "options": {
        "detoxConfiguration": "ios.sim.debug",
      },
    },
    "e2e:android": {
      "configurations": {
        "production": {
          "buildTarget": "react-native-app-e2e:build-e2e:android:production",
          "detoxConfiguration": "android.emu.release",
        },
      },
      "executor": "@nx/detox:test",
      "options": {
        "buildTarget": "react-native-app-e2e:build-e2e:android",
        "detoxConfiguration": "android.emu.debug",
      },
    },
    "e2e:ios": {
      "configurations": {
        "production": {
          "buildTarget": "react-native-app-e2e:build-e2e:ios:production",
          "detoxConfiguration": "ios.sim.release",
        },
      },
      "executor": "@nx/detox:test",
      "options": {
        "buildTarget": "react-native-app-e2e:build-e2e:ios",
        "detoxConfiguration": "ios.sim.debug",
      },
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "options": {
        "lintFilePatterns": [
          "e2e/react-native-app-e2e/**/*.{ts,tsx,js,jsx}",
        ],
      },
      "outputs": [
        "{options.outputFile}",
      ],
    },
  },
}
`;

exports[`reactNativeAppGenerator e2e project.json project.json matches snapshot 1`] = `
"{
  "name": "react-native-app-e2e",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "packages/react-native-app-e2e/src",
  "projectType": "application",
  "targets": {
    "build-e2e:ios": {
      "executor": "@nx/detox:build",
      "options": {
        "detoxConfiguration": "ios.sim.debug"
      },
      "configurations": {
        "production": {
          "detoxConfiguration": "ios.sim.release"
        }
      }
    },
    "e2e:ios": {
      "executor": "@nx/detox:test",
      "options": {
        "detoxConfiguration": "ios.sim.debug",
        "buildTarget": "react-native-app-e2e:build-e2e:ios"
      },
      "configurations": {
        "production": {
          "detoxConfiguration": "ios.sim.release",
          "buildTarget": "react-native-app-e2e:build-e2e:ios:production"
        }
      }
    },
    "build-e2e:android": {
      "executor": "@nx/detox:build",
      "options": {
        "detoxConfiguration": "android.emu.debug"
      },
      "configurations": {
        "production": {
          "detoxConfiguration": "android.emu.release"
        }
      }
    },
    "e2e:android": {
      "executor": "@nx/detox:test",
      "options": {
        "detoxConfiguration": "android.emu.debug",
        "buildTarget": "react-native-app-e2e:build-e2e:android"
      },
      "configurations": {
        "production": {
          "detoxConfiguration": "android.emu.release",
          "buildTarget": "react-native-app-e2e:build-e2e:android:production"
        }
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": [
        "{options.outputFile}"
      ],
      "options": {
        "lintFilePatterns": [
          "e2e/react-native-app-e2e/**/*.{ts,tsx,js,jsx}"
        ]
      }
    }
  },
  "tags": [],
  "implicitDependencies": [
    "react-native-app"
  ]
}
"
`;

exports[`reactNativeAppGenerator e2e typescript tsconfig.json tsconfig.json matches snapshot 1`] = `
"{
  "extends": "../../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`reactNativeAppGenerator e2e typescript tsconfig.spec.json matches snapshot 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "sourceMap": false,
    "outDir": "../../dist/out-tsc",
    "allowJs": true,
    "types": ["node", "jest", "detox"]
  },
  "include": ["test/**/*.ts", "test/**/*.js"]
}
"
`;

exports[`reactNativeAppGenerator jest.config.ts jest.config.ts matches snapshot 1`] = `
"export default {
  displayName: "react-native-app",
    preset: "react-native",
  resolver: "@nx/jest/plugins/resolver",
  setupFilesAfterEnv: ["<rootDir>/test/setup/setup.ts"],
  moduleNameMapper: {
    "\\\\.svg$": "@nx/react-native/plugins/jest/svg-mock",
  },
            moduleFileExtensions: ["ts", "tsx", "js", "jsx", "html", "json"],
    coverageDirectory: "../../reports/coverage/packages/react-native-app",
  reporters: [
    "default",
    [
      "jest-junit",
      {
        addFileAttribute: "true",
        classNameTemplate: "{suitename}",
        outputDirectory: "reports/junit",
        outputName: "react-native-app.xml",
      },
    ],
  ],
};
"
`;

exports[`reactNativeAppGenerator native projects android build.gradle android/app/build.gradle matches snapshot 1`] = `
"apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
    entryFile = file("../../src/main.tsx")
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * \`def jscFlavor = 'org.webkit:android-jsc-intl:+'\`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. \`Date.toLocaleString\` and \`String.localeCompare\` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Load the signing keystore from a file
 */
def keyStorePropertiesFile = rootProject.file('secrets/upload-keystore.properties')
def keyStoreProperties = new Properties()
keyStoreProperties.load(new FileInputStream(keyStorePropertiesFile))

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.chiubaka.genesis.example.reactnativeapp"
    defaultConfig {
        applicationId "com.chiubaka.genesis.example.ReactNativeApp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            keyAlias keyStoreProperties['releaseKeyAlias']
            keyPassword keyStoreProperties['releaseKeyPassword']
            storeFile file(rootProject.file('secrets/upload-keystore.jks'))
            storePassword keyStoreProperties['releaseStorePassword']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            
            proguardFile "\${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            
        }
    }
}

dependencies {
    
    androidTestImplementation('com.wix:detox:+')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:\${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:\${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:\${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
"
`;

exports[`reactNativeAppGenerator native projects fastlane Appfile Appfile matches snapshot 1`] = `
"# For more information about the Appfile, see:
#     https://docs.fastlane.tools/advanced/#appfile

app_identifier("com.chiubaka.genesis.example.ReactNativeApp") # The bundle identifier of your app
package_name("com.chiubaka.genesis.example.ReactNativeApp") # e.g. com.krausefx.app

json_key_file("android/secrets/google-play-key.json") # Path to the json private key for a Google service account with Google Play Android Developer API access. Follow https://docs.fastlane.tools/actions/supply/#setup to get one

apple_id("example@chiubaka.com") # Your Apple Developer Portal username
"
`;

exports[`reactNativeAppGenerator native projects fastlane Fastfile Fastfile matches snapshot 1`] = `
"# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require "dotenv"
Dotenv.load("#{__dir__}/Fastlane.env")

PROJECT_NAME = "ReactNativeApp"
ANDROID_ROOT = "android"
IOS_ROOT = "ios"

IS_CI = ENV["CI"] == "true"
IS_TEST = ENV["NODE_ENV"] == "test"
APP_STORE_CONNECT_APP_ID = ENV["APP_STORE_CONNECT_APP_ID"]

PACKAGE_JSON = load_json(json_path: "./package.json")
APP_VERSION = PACKAGE_JSON["version"]

before_all do
  setup_circle_ci
end

platform :ios do
  XCODE_WORKSPACE = "#{IOS_ROOT}/#{PROJECT_NAME}.xcworkspace"
  XCODE_PROJECT = "#{IOS_ROOT}/#{PROJECT_NAME}.xcodeproj"
  SCHEME = PROJECT_NAME

  before_all do
    xcodes
  end

  desc "Clean the iOS project of intermediate build artifacts"
  lane :clean do
    xcclean(workspace: XCODE_WORKSPACE, scheme: SCHEME)
  end

  desc "Update the iOS version and build number metadata based on the project"
  lane :update_version_and_build_number do
    increment_version_number(version_number: APP_VERSION, xcodeproj: XCODE_PROJECT)
    increment_build_number(xcodeproj: XCODE_PROJECT)
  end

  desc "Build the iOS project"
  lane :build do |options|
    clean

    configuration = (options[:configuration] || "Release").capitalize
    build_for_simulator = options[:simulator] == true
    destination = build_for_simulator ? "generic/platform=iOS Simulator" : nil
    skip_archive = options[:simulator] == true
    export_method = configuration == "Release" ? "app-store" : "development"

    unless build_for_simulator
      match_type = configuration == "Release" ? "appstore" : "development"
      match(type: match_type, readonly: true)
    end

    build_app(
      workspace: XCODE_WORKSPACE,
      scheme: SCHEME,
      configuration: configuration,
      destination: destination,
      derived_data_path: "#{IOS_ROOT}/build",
      export_method: export_method,
      skip_archive: skip_archive
    )
  end

  desc "Run native iOS tests"
  lane :test do
    run_tests(workspace: XCODE_WORKSPACE, scheme: SCHEME, prelaunch_simulator: true)
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    unless IS_CI || IS_TEST
      ensure_git_status_clean
    end

    update_version_and_build_number
    build(configuration: "Release")
    if IS_CI || IS_TEST
      # skip_waiting_for_building_processing + apple_id options allow this command to use an app-specific password
      upload_to_testflight(skip_waiting_for_build_processing: true, apple_id: APP_STORE_CONNECT_APP_ID)
    else
      reset_git_repo
      upload_to_testflight
    end
  end

  desc "Push a new build to the AppStore"
  lane :deploy do
    unless IS_CI || IS_TEST
      ensure_git_status_clean
    end

    update_version_and_build_number
    build(configuration: "Release")

    unless IS_CI || IS_TEST
      reset_git_repo
    end

    upload_to_app_store
  end
end

platform :android do
  GRADLE_FILE_PATH = "#{ANDROID_ROOT}/app/build.gradle"

  desc "Clean the Android project of intermediate build artifacts"
  lane :clean do
    gradle(project_dir: ANDROID_ROOT, task: "clean")
  end

  desc "Update the Android version and build number metadata based on the project"
  lane :update_version_and_build_number do
    increment_version_name(
      gradle_file_path: GRADLE_FILE_PATH,
      version_name: APP_VERSION
    )

    version_code = get_next_google_play_version_code()
    android_set_version_code(gradle_file: GRADLE_FILE_PATH, version_code: version_code)
  end

  desc "Build the Android project"
  lane :build do |options|
    clean

    assemble_test = options[:test] == true
    build_type = options[:build_type] || "release"
    task = options[:task] || "assemble"

    primary_task = build_type == "release" ? "#{task}Release" : "#{task}Debug"
    tasks = [primary_task]

    flags = nil

    if assemble_test
      tasks.append("assembleAndroidTest")
      flags = "-DtestBuildType=#{build_type}"
    end

    gradle(project_dir: ANDROID_ROOT, tasks: tasks, flags: flags)
  end

  desc "Run native Android tests"
  lane :test do
    gradle(project_dir: ANDROID_ROOT, task: "test")
  end

  desc "Submit a new internal build to Google Play"
  lane :beta do
    unless IS_CI || IS_TEST
      ensure_git_status_clean
    end

    update_version_and_build_number
    build(task: "bundle", build_type: "release")

    unless IS_CI || IS_TEST
      reset_git_repo
    end

    upload_to_play_store(
      track: "internal",
      release_status: "draft"
    )
  end

  desc "Deploy a new production version to Google Play"
  lane :deploy do
    build
    upload_to_play_store
  end
end
"
`;

exports[`reactNativeAppGenerator native projects fastlane Fastlane.env Fastlane.env matches snapshot 1`] = `
"# Fastlane saves a lot of useful configuration in Appfile and Matchfile.
# However, these files are not extensible, and some important values (e.g.
# the integer ID for an app registered with App Store Connect) don't have
# a natural slot in these files. We create and load the custom Fastlane.env
# file to contain values such as these. In some cases saving these values
# is important in order to avoid complicating authentication for CI at a
# later point.

# This file should be checked into source control!
# DO NOT PLACE SECRETS IN THIS FILE

APP_NAME=Genesis React Native App"
`;

exports[`reactNativeAppGenerator native projects ios Podfile Podfile matches snapshot 1`] = `
"# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command("node", ["-p",
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a \`react-native-flipper\` your iOS build will fail when \`NO_FLIPPER=1\` is set.
# because \`react-native-flipper\` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude \`react-native-flipper\` using a \`react-native.config.js\`
# \`\`\`js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { "react-native-flipper": { platforms: { ios: null } } } : {}),
# \`\`\`
flipper_config = ENV["NO_FLIPPER"] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV["USE_FRAMEWORKS"]
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target "ReactNativeApp" do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target "ReactNativeAppTests" do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
"
`;

exports[`reactNativeAppGenerator native projects ios ReactNativeApp/Info.plist matches snapshot 1`] = `
"<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleDisplayName</key>
	<string>Genesis React Native App</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundleIconName</key>
	<string>AppIcon</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(MARKETING_VERSION)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(CURRENT_PROJECT_VERSION)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSExceptionDomains</key>
		<dict>
			<key>localhost</key>
			<dict>
				<key>NSExceptionAllowsInsecureHTTPLoads</key>
				<true/>
			</dict>
		</dict>
	</dict>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string></string>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>armv7</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
</dict>
</plist>
"
`;

exports[`reactNativeAppGenerator project.json matches snapshot 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "react-native-app",
  "projectType": "application",
  "sourceRoot": "packages/react-native-app/src",
  "tags": [],
  "targets": {
    "build:android": {
      "configurations": {
        "bundle-release": {
          "command": "bundle exec fastlane android build task:bundle",
        },
        "debug": {
          "command": "bundle exec fastlane android build build_type:debug",
        },
        "release": {
          "command": "bundle exec fastlane android build",
        },
        "test-debug": {
          "command": "bundle exec fastlane android build build_type:debug test:true",
        },
        "test-release": {
          "command": "bundle exec fastlane android build build_type:release test:true",
        },
      },
      "defaultConfiguration": "release",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/react-native-app",
      },
      "outputs": [
        "{projectRoot}/android/app/build/outputs/bundle",
        "{projectRoot}/android/app/build/outputs/apk",
      ],
    },
    "build:ios": {
      "configurations": {
        "debug": {
          "command": "bundle exec fastlane ios build configuration:debug",
        },
        "debug-simulator": {
          "command": "bundle exec fastlane ios build configuration:debug simulator:true",
        },
        "release": {
          "command": "bundle exec fastlane ios build configuration:release",
        },
        "release-simulator": {
          "command": "bundle exec fastlane ios build configuration:release simulator:true",
        },
      },
      "defaultConfiguration": "release",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
        "pod-install",
      ],
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/react-native-app",
      },
      "outputs": [
        "{projectRoot}/ios/build/Build",
      ],
    },
    "bundle:android": {
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "executor": "@nx/react-native:bundle",
      "options": {
        "bundleOutput": "dist/packages/react-native-app/android/main.jsbundle",
        "entryFile": "src/main.tsx",
        "platform": "android",
      },
      "outputs": [
        "{options.bundleOutput}",
      ],
    },
    "bundle:ios": {
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "executor": "@nx/react-native:bundle",
      "options": {
        "bundleOutput": "dist/packages/react-native-app/ios/main.jsbundle",
        "entryFile": "src/main.tsx",
        "platform": "ios",
      },
      "outputs": [
        "{options.bundleOutput}",
      ],
    },
    "deploy:android": {
      "configurations": {
        "beta": {
          "command": "bundle exec fastlane android beta",
        },
        "production": {
          "command": "bundle exec fastlane android deploy",
        },
      },
      "defaultConfiguration": "beta",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/react-native-app",
      },
    },
    "deploy:ios": {
      "configurations": {
        "beta": {
          "command": "bundle exec fastlane ios beta",
        },
        "production": {
          "command": "bundle exec fastlane ios deploy",
        },
      },
      "defaultConfiguration": "beta",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
        "pod-install",
      ],
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/react-native-app",
      },
    },
    "ensure-symlink": {
      "executor": "@nx/react-native:ensure-symlink",
      "options": {},
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "options": {
        "lintFilePatterns": [
          "packages/react-native-app",
        ],
      },
      "outputs": [
        "{options.outputFile}",
      ],
    },
    "pod-install": {
      "command": "bundle exec pod install --project-directory=./ios",
      "options": {
        "cwd": "packages/react-native-app",
      },
    },
    "run:android": {
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "executor": "@nx/react-native:run:android",
      "options": {},
    },
    "run:ios": {
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
        "pod-install",
      ],
      "executor": "@nx/react-native:run:ios",
      "options": {},
    },
    "serve": {
      "executor": "nx:run-commands",
      "options": {
        "command": "nx start react-native-app",
      },
    },
    "start": {
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
        "pod-install",
      ],
      "executor": "@nx/react-native:start",
      "options": {
        "port": 8081,
      },
    },
    "sync-deps": {
      "executor": "@nx/react-native:sync-deps",
      "options": {},
    },
    "test": {
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true,
        },
      },
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "packages/react-native-app/jest.config.ts",
        "passWithNoTests": true,
      },
      "outputs": [
        "reports/coverage/packages/react-native-app",
        "reports/junit/react-native-app.xml",
      ],
    },
    "test:android": {
      "command": "bundle exec fastlane android test",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
      ],
      "options": {
        "cwd": "packages/react-native-app",
      },
    },
    "test:ios": {
      "command": "bundle exec fastlane ios test",
      "dependsOn": [
        "ensure-symlink",
        "sync-deps",
        "pod-install",
      ],
      "options": {
        "cwd": "packages/react-native-app",
      },
    },
  },
}
`;

exports[`reactNativeAppGenerator tsconfig.app.json or tsconfig.lib.json matches snapshot 1`] = `
{
  "compilerOptions": {
    "declaration": true,
  },
  "exclude": [
    "jest.config.ts",
    "**/*.spec.ts",
    "**/*.test.ts",
    "**/*.spec.tsx",
    "**/*.test.tsx",
    "test",
  ],
  "extends": "./tsconfig.json",
  "include": [
    "**/*.ts",
    "**/*.tsx",
  ],
}
`;

exports[`reactNativeAppGenerator tsconfig.json matches snapshot 1`] = `
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext",
    ],
    "module": "esnext",
    "outDir": "../../dist/out-tsc",
    "target": "es5",
  },
  "extends": "../../tsconfig.base.json",
  "files": [
    "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
  ],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`reactNativeAppGenerator tsconfig.spec.json matches snapshot 1`] = `
{
  "compilerOptions": {
    "module": "commonjs",
    "types": [
      "jest",
      "node",
    ],
  },
  "extends": "./tsconfig.json",
  "include": [
    "jest.config.ts",
    "**/*.spec.ts",
    "**/*.test.ts",
    "**/*.spec.tsx",
    "**/*.test.tsx",
    "**/*.d.ts",
    "test",
  ],
}
`;

exports[`reactNativeAppGenerator workspace package scripts matches snapshot 1`] = `
{
  "build:affected": "nx affected --target=build --target=build:android --target=build:ios --output-style=stream --verbose",
  "build:all": "nx run-many --target=build --target=build:android --target=build:ios --output-style=stream --verbose",
  "build:android:affected": "nx affected --target=build:android --output-style=stream --verbose",
  "build:android:all": "nx run-many --target=build:android --all --output-style=stream --verbose",
  "build:android:ci": "./scripts/ci.sh build:android ",
  "build:ci": "yarn build:js:ci",
  "build:ios:affected": "nx affected --target=build:ios --output-style=stream --verbose",
  "build:ios:all": "nx run-many --target=build:ios --all --output-style=stream --verbose",
  "build:ios:ci": "./scripts/ci.sh build:ios ",
  "build:js:affected": "nx affected --target=build --output-style=stream --verbose",
  "build:js:all": "nx run-many --target=build --all --output-style=stream --verbose",
  "build:js:ci": "./scripts/ci.sh build:js ",
  "deploy:android": "nx deploy:android $@",
  "deploy:android:ci": "yarn deploy:android",
  "deploy:ios": "nx deploy:ios $@",
  "deploy:ios:ci": "yarn deploy:ios",
  "e2e:affected": "nx affected --target=e2e --target=e2e:android --target=e2e:ios --output-style=stream --verbose",
  "e2e:all": "nx run-many --target=e2e --target=e2e:android --target=e2e:ios --output-style=stream --verbose",
  "e2e:android:affected": "nx affected --target=e2e:android --output-style=stream --verbose",
  "e2e:android:all": "nx run-many --target=e2e:android --all --output-style=stream --verbose",
  "e2e:android:ci": "./scripts/ci.sh e2e:android --ci --coverage",
  "e2e:ci": "yarn e2e:js:ci",
  "e2e:ios:affected": "nx affected --target=e2e:ios --output-style=stream --verbose",
  "e2e:ios:all": "nx run-many --target=e2e:ios --all --output-style=stream --verbose",
  "e2e:ios:ci": "./scripts/ci.sh e2e:ios --ci --coverage",
  "e2e:js:affected": "nx affected --target=e2e --output-style=stream --verbose",
  "e2e:js:all": "nx run-many --target=e2e --all --output-style=stream --verbose",
  "e2e:js:ci": "./scripts/ci.sh e2e:js --ci --coverage",
  "test:affected": "nx affected --target=test --target=test:android --target=test:ios --output-style=stream --verbose",
  "test:all": "nx run-many --target=test --target=test:android --target=test:ios --output-style=stream --verbose",
  "test:android:affected": "nx affected --target=test:android --output-style=stream --verbose",
  "test:android:all": "nx run-many --target=test:android --all --output-style=stream --verbose",
  "test:android:ci": "./scripts/ci.sh test:android --ci --coverage",
  "test:ci": "yarn test:js:ci",
  "test:ios:affected": "nx affected --target=test:ios --output-style=stream --verbose",
  "test:ios:all": "nx run-many --target=test:ios --all --output-style=stream --verbose",
  "test:ios:ci": "./scripts/ci.sh test:ios --ci --coverage",
  "test:js:affected": "nx affected --target=test --output-style=stream --verbose",
  "test:js:all": "nx run-many --target=test --all --output-style=stream --verbose",
  "test:js:ci": "./scripts/ci.sh test:js --ci --coverage",
}
`;
