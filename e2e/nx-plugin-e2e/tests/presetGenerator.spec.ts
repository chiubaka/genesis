import { TestingWorkspace, Verdaccio } from "@chiubaka/nx-plugin-testing";
import { tmpProjPath, uniq } from "@nrwl/nx-plugin/testing";
import { ensureDirSync, moveSync, removeSync } from "fs-extra";
import os from "node:os";
import path from "node:path";

describe.skip("presetGenerator", () => {
  let verdaccio: Verdaccio;
  let workspace: TestingWorkspace;

  beforeAll(async () => {
    verdaccio = new Verdaccio();
    await verdaccio.start();

    verdaccio.publish(path.join(__dirname, "../../../dist/packages/nx-plugin"));

    const workspaceName = "preset";

    const tmpDir = path.join(os.tmpdir(), uniq(workspaceName));
    ensureDirSync(tmpDir);

    verdaccio.npx(
      `create-nx-workspace ${workspaceName} --preset=@chiubaka/nx-plugin --nxCloud=false`,
      tmpDir,
    );

    const tmpDestination = path.join(tmpDir, workspaceName);
    const destination = path.join(tmpProjPath(), "..", workspaceName);

    removeSync(destination);
    moveSync(tmpDestination, destination);

    workspace = new TestingWorkspace(destination);
  });

  afterAll(async () => {
    await workspace.execNx("reset");

    verdaccio.stop();
  });

  it("should not create an apps dir", () => {
    workspace.assert.fs.notExists("apps");
  });

  describe("package manager", () => {
    it("should install packages with yarn", () => {
      workspace.assert.fs.exists("yarn.lock");
    });

    it("should install packages with yarn v3", () => {
      workspace.assert.fs.fileContents(".yarnrc.yml", ".yarn/releases/yarn-3.");
    });

    it("should continue to use the yarn v3 node-modules nodeLinker for compatibility", () => {
      workspace.assert.fs.fileContents(
        ".yarnrc.yml",
        "nodeLinker: node-modules",
      );
    });

    it("should not install packages with npm", () => {
      workspace.assert.fs.notExists("package-lock.json");
    });
  });

  describe("tsconfig", () => {
    it("generates a tsconfig.base.json file", () => {
      workspace.assert.fs.exists("tsconfig.base.json");
    });

    describe("tsconfig.base.json", () => {
      it("extends from @chiubaka/tsconfig", () => {
        workspace.assert.fs.jsonFileContents("tsconfig.base.json", {
          extends: "@chiubaka/tsconfig",
        });
      });
    });
  });

  describe("linting", () => {
    it("creates a working linting setup", async () => {
      await workspace.assert.linting.hasValidConfig();
    });

    it("creates a working lint fix setup", async () => {
      await workspace.assert.linting.canFixIssues();
    });

    it("generates a project without linting issues", async () => {
      await workspace.assert.linting.isClean();
    });

    it("generates a working lint-staged setup", async () => {
      await workspace.assert.linting.canFixStagedIssues();
    });
  });

  describe("git", () => {
    it("creates an initial commit with a generated message", async () => {
      await workspace.assert.git.latestCommitMessage(
        "Initial commit with files generated by @chiubaka/nx-plugin@0.0.1 preset.",
      );
    });

    it("leaves the working directory clean", async () => {
      await workspace.assert.git.workingDirectoryIsClean();
    });
  });

  describe("git hooks", () => {
    describe("pre-commit hook", () => {
      it("creates a pre-commit hook", () => {
        workspace.assert.fs.exists(".husky/pre-commit");
      });

      it("populates the pre-commit hook with the correct command", () => {
        workspace.assert.fs.fileContents(
          ".husky/pre-commit",
          "yarn lint:staged",
        );
      });
    });

    describe("pre-push hook", () => {
      it("creates a pre-push hook", () => {
        workspace.assert.fs.exists(".husky/pre-push");
      });

      it("populates the pre-push hook with the correct command", () => {
        workspace.assert.fs.fileContents(
          ".husky/pre-push",
          "nx affected --target=test",
        );
      });
    });
  });

  describe("testing", () => {
    it("generates a Codecov configuration file", () => {
      workspace.assert.fs.exists("codecov.yml");
    });
  });

  describe("CI", () => {
    it("generates a .circleci/config.yml file", () => {
      workspace.assert.fs.exists(".circleci/config.yml");
    });
  });
});
